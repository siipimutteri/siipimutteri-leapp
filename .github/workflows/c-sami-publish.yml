name: Leapp Publish

on:
  push:
    branches:
      - own-build
  workflow_dispatch:
    inputs:
      linux:
        description: "Publish linux packages"
        required: false
        type: boolean
      mac:
        description: "Publish mac packages"
        required: false
        type: boolean
      windows:
        description: "Publish windows packages"
        required: false
        type: boolean
      
jobs:
  changes:
    name: 'Inspect changes'
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      cli: ${{ steps.filter.outputs.cli }}
      desktop-app: ${{ steps.filter.outputs.desktop-app }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: HEAD
        filters: |
          core:
            - 'packages/core/**'
          cli:
            - 'packages/cli/**'
          desktop-app:
            - 'packages/desktop-app/**'
  

  publish_linux:
    name: 'Publish linux'
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.cli == 'true' || needs.changes.outputs.desktop-app == 'true' || (always() && github.event.inputs.linux == 'true') }}
    strategy:
      matrix:
        #os: [ ubuntu-latest, windows-latest, macos-latest ]
        os: [ ubuntu-latest ]
        node_version: [ 16 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare GIT
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Bootstrap
        run: |
          mkdir upload
          npm install
      - name: Build core
        run: |
          cd packages/core
          npm install
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT-linux
          npm run build
      - name: Build cli
        run: |
          cd packages/cli
          npm install
          npm install ../core
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT-linux
          npm run prepack
      - name: Build desktop-app
        run: |
          cd packages/desktop-app
          npm install
          npm install ../core
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT-linux
          npm pkg delete build.publish
          npm run release-linux
          cp -v release/Leapp-$curVer-$gitHash.$GITHUB_RUN_ATTEMPT-linux.AppImage ../../upload
          cp -v release/Leapp_$curVer-$gitHash.$GITHUB_RUN_ATTEMPT-linux_amd64.deb ../../upload
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_BUCKET_REGION }}
      - name: Publish
        env:
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        run: |
          aws s3 cp upload/ s3://$AWS_S3_BUCKET_NAME/ --recursive

  publish_windows:
    name: 'Publish windows'
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.cli == 'true' || needs.changes.outputs.desktop-app == 'true' || (always() && github.event.inputs.windows == 'true') }}
    strategy:
      matrix:
        os: [ windows-latest ]
        node_version: [ 16 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare GIT
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v3
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Bootstrap
        run: |
          New-Item -Path upload -ItemType Directory
          npm install
      - name: Build core
        run: |
          cd packages/core
          npm install
          $curVer = (npm pkg get version).Trim('"')
          $gitHash = (git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$env:GITHUB_RUN_ATTEMPT-win
          npm run build
      - name: Build cli
        run: |
          cd packages/cli
          npm install
          npm install ../core
          $curVer = (npm pkg get version).Trim('"')
          $gitHash = (git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$env:GITHUB_RUN_ATTEMPT-win
          npm run prepack
      - name: Build and publish desktop-app
        env:
          WIN_CSC_KEY_UUCONTENT: ${{ secrets.WIN_CSC_KEY_UUCONTENT }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        run: |
          cd packages/desktop-app
          npm install
          npm install ../core
          $curVer = (npm pkg get version).Trim('"')
          $gitHash = (git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$env:GITHUB_RUN_ATTEMPT-win
          npm pkg delete build.publish
          [System.Convert]::FromBase64String($env:WIN_CSC_KEY_UUCONTENT) | Set-Content -Path windows_sign_certificate.pfx -AsByteStream
          npm run release-win
          Copy-Item -Path release\Leapp-$curVer-$gitHash.$env:GITHUB_RUN_ATTEMPT-win-win.zip -Destination ..\..\upload\ -Verbose
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_S3_BUCKET_REGION }}
      - name: Publish
        env:
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
        run: |
          aws s3 cp upload/ s3://$AWS_S3_BUCKET_NAME/ --recursive
