name: Leapp Publish

on:
  push:
    branches:
      - own-build
  workflow_dispatch:
    inputs:
      linux:
        description: "Publish linux packages"
        required: false
        type: boolean
      mac:
        description: "Publish mac packages"
        required: false
        type: boolean
      windows:
        description: "Publish windows packages"
        required: false
        type: boolean
      
jobs:
  changes:
    name: 'Inspect changes'
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      cli: ${{ steps.filter.outputs.cli }}
      desktop-app: ${{ steps.filter.outputs.desktop-app }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: HEAD
        filters: |
          core:
            - 'packages/core/**'
          cli:
            - 'packages/cli/**'
          desktop-app:
            - 'packages/desktop-app/**'
  
  #publish_core:
  #  name: 'Core: publish'
  #  needs: changes
  #  if: ${{ needs.changes.outputs.core == 'true' || (always() && github.event.inputs.core == 'true') }}
  #  strategy:
  #    matrix:
  #      #os: [ ubuntu-latest, windows-latest, macos-latest ]
  #      os: [ ubuntu-latest ]
  #      node_version: [ 16 ]
  #  runs-on: ${{ matrix.os }}
  #  steps:
  #    - name: Prepare GIT
  #      run: |
  #        git config --global core.autocrlf false
  #        git config --global core.eol lf
  #    - uses: actions/checkout@v3
  #    - uses: actions/setup-node@v3
  #      with:
  #        node-version: ${{ matrix.node_version }}
  #    - name: Setup NPM
  #      env:
  #        JF_USER: ${{ secrets.JF_SECRET_USER }}
  #        JF_API_KEY: ${{ secrets.JF_SECRET_API_KEY }}
  #        JF_HOST: ${{ secrets.JF_SECRET_HOST }}
  #        JF_REPO: ${{ secrets.JF_SECRET_REPO }}
  #      run: |
  #        curl -u $JF_USER:$JF_API_KEY https://$JF_HOST/artifactory/api/npm/auth/ -o ~/.npmrc
  #        echo "registry=https://$JF_HOST/artifactory/api/npm/$JF_REPO/" >> ~/.npmrc
  #    - name: Bootstrap and build
  #      run: |
  #        npm install
  #        npm run set-dev-environment
  #        node_modules/.bin/gushio gushio/bootstrap.js core
  #    - name: Publish
  #      run: |
  #        cd packages/core
  #        eval curVer=$(npm pkg get version)
  #        eval gitHash=$(git rev-parse --short HEAD)
  #        npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT
  #        npm run release

  publish_linux:
    name: 'Publish linux'
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.cli == 'true' || needs.changes.outputs.desktop-app == 'true' || (always() && github.event.inputs.linux == 'true') }}
    strategy:
      matrix:
        #os: [ ubuntu-latest, windows-latest, macos-latest ]
        os: [ ubuntu-latest ]
        node_version: [ 16 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare GIT
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - name: Setup NPM
        env:
          JF_USER: ${{ secrets.JF_SECRET_USER }}
          JF_API_KEY: ${{ secrets.JF_SECRET_API_KEY }}
          JF_HOST: ${{ secrets.JF_SECRET_HOST }}
          JF_REPO: ${{ secrets.JF_SECRET_REPO }}
        run: |
          curl -u $JF_USER:$JF_API_KEY https://$JF_HOST/artifactory/api/npm/auth/ -o ~/.npmrc
          echo "registry=https://$JF_HOST/artifactory/api/npm/$JF_REPO/" >> ~/.npmrc
      - name: Bootstrap
        run: |
          npm install
      - name: Build core
        run: |
          cd packages/core
          npm install
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT
          npm run build
      - name: Build and publish cli
        run: |
          cd packages/cli
          npm install ../core
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT
          npm run release-npm
      - name: Build and publish desktop-app
        env:
          JF_USER: ${{ secrets.JF_SECRET_USER }}
          JF_API_KEY: ${{ secrets.JF_SECRET_API_KEY }}
          JF_HOST: ${{ secrets.JF_SECRET_HOST }}
          JF_BIN_REPO: ${{ secrets.JF_SECRET_BIN_REPO }}
        run: |
          cd packages/desktop-app
          npm install ../core
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT
          npm pkg delete build.publish
          npm run release-linux
          rm -Rf ./release/linux-unpacked ./release/.cache ./release/builder-debug.yml ./release/builder-effective-config.yaml ./release/.icon-set ./release/latest-linux.yml
          ls -la ./release
          curl -u $JF_USER:$JF_API_KEY -T release/Leapp-$curVer-$gitHash.$GITHUB_RUN_ATTEMPT.AppImage https://$JF_HOST/artifactory/$JF_BIN_REPO/
          curl -u $JF_USER:$JF_API_KEY -T release/Leapp_$curVer-$gitHash.$GITHUB_RUN_ATTEMPT_amd64.deb https://$JF_HOST/artifactory/$JF_BIN_REPO/

  publish_windows:
    name: 'Publish windows'
    needs: changes
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.cli == 'true' || needs.changes.outputs.desktop-app == 'true' || (always() && github.event.inputs.windows == 'true') }}
    strategy:
      matrix:
        os: [ windows-latest ]
        node_version: [ 16 ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Prepare GIT
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - name: Setup NPM
        env:
          JF_USER: ${{ secrets.JF_SECRET_USER }}
          JF_API_KEY: ${{ secrets.JF_SECRET_API_KEY }}
          JF_HOST: ${{ secrets.JF_SECRET_HOST }}
          JF_REPO: ${{ secrets.JF_SECRET_REPO }}
        run: |
          curl -u $JF_USER:$JF_API_KEY https://$JF_HOST/artifactory/api/npm/auth/ -o ~/.npmrc
          echo "registry=https://$JF_HOST/artifactory/api/npm/$JF_REPO/" >> ~/.npmrc
      - name: Bootstrap
        run: |
          npm install
      - name: Build core
        run: |
          cd packages/core
          npm install
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT
          npm run build
      - name: Build and publish cli
        run: |
          cd packages/cli
          npm install ../core
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT
          npm run release-npm
      - name: Build and publish desktop-app
        env:
          JF_USER: ${{ secrets.JF_SECRET_USER }}
          JF_API_KEY: ${{ secrets.JF_SECRET_API_KEY }}
          JF_HOST: ${{ secrets.JF_SECRET_HOST }}
          JF_BIN_REPO: ${{ secrets.JF_SECRET_BIN_REPO }}
        run: |
          cd packages/desktop-app
          npm install ../core
          eval curVer=$(npm pkg get version)
          eval gitHash=$(git rev-parse --short HEAD)
          npm pkg set version=$curVer-$gitHash.$GITHUB_RUN_ATTEMPT
          npm pkg delete build.publish
          npm run release-windows
          #rm -Rf ./release/linux-unpacked ./release/.cache ./release/builder-debug.yml ./release/builder-effective-config.yaml ./release/.icon-set ./release/latest-linux.yml
          ls -la ./release
          #curl -u $JF_USER:$JF_API_KEY -T release/Leapp-$curVer-$gitHash.$GITHUB_RUN_ATTEMPT.AppImage https://$JF_HOST/artifactory/$JF_BIN_REPO/
          #curl -u $JF_USER:$JF_API_KEY -T release/Leapp_$curVer-$gitHash.$GITHUB_RUN_ATTEMPT_amd64.deb https://$JF_HOST/artifactory/$JF_BIN_REPO/


#
#  build_and_test_desktop-app:
#    name: 'Desktop app: build and test'
#    needs: changes
#    if: ${{ needs.changes.outputs.desktop-app == 'true' || (always() && github.event.inputs.desktop-app == 'true') }}
#    strategy:
#      matrix:
#        #os: [ ubuntu-latest, windows-latest, macos-latest ]
#        os: [ ubuntu-latest ]
#        node_version: [ 16 ]
#    env:
#      SKIP_INTEGRATION_TESTS: "true"
#    runs-on: ${{ matrix.os }}
#    steps:
#      - name: Prepare GIT
#        run: |
#          git config --global core.autocrlf false
#          git config --global core.eol lf
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node_version }}
#      - name: Bootstrap
#        run: |
#          npm install
#          node_modules/.bin/gushio gushio/bootstrap.js core desktop-app
#      - name: Build
#        run: |
#          cd packages/desktop-app
#          npm run build-prod
#      - name: Test
#        run: |
#          cd packages/desktop-app
#          node_modules/.bin/ng test --browsers=ChromeHeadless --watch=false --progress=false